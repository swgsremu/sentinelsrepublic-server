/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.intangible;

import server.zone.objects.scene.SceneObject;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;

include templates.SharedObjectTemplate;
include server.zone.objects.scene.variables.ContainerPermissions;

@json
class IntangibleObject extends SceneObject {
	protected unsigned int status;
	protected float datapadSize;
	protected string itemIdentifier;

	public IntangibleObject() {
		Logger.setLoggingName("IntangibleObject");

		status = 0;
		datapadSize = 0;
		itemIdentifier = "";

		super.setContainerInheritPermissionsFromParent(false);
		super.setContainerDefaultDenyPermission(ContainerPermissions.MOVECONTAINER);
		super.setContainerDenyPermission("owner", ContainerPermissions.MOVECONTAINER);
	}

	public void finalize() {

	}

	public native void initializeTransientMembers();

	/**
	 * Reads and sets the template data from a SharedObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { SceneObject members are initialized }
	 * @param templateData templateData points to the LuaObject that is used to initialize SceneObejct members
	 */
	@local
	public void loadTemplateData(SharedObjectTemplate templateData) {
		super.loadTemplateData(templateData);
	}

	@dirty
	public native void sendBaselinesTo(SceneObject player);

	@dirty
	@local
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	@preLocked
	public native void updateStatus(int newStatus, boolean notifyClient = true);

	@preLocked
	public native void setCustomObjectName(final unicode name, boolean notifyClient);

	@preLocked
	public native void setDataSize(float dataSize, boolean notifyClient);

	@preLocked
	public native void setItemIdentifier(final string itemName, boolean notifyClient);

	@read
	public unsigned int getStatus() {
		return status;
	}

	@read
	public float getDataSize() {
		return datapadSize;
	}

	@read
	public string getItemIdentifier() {
		return itemIdentifier;
	}

	@dirty
	public boolean isIntangibleObject() {
		return true;
	}
}
